name: üöÄ Build & Deploy

on:
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'android/**'
      - 'ios/**'
      - 'src/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Build environment'
        required: true
        default: 'mainnet'
        type: choice
        options:
          - mainnet
          - alfajores
      deploy_stores:
        description: 'Deploy to app stores'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.17.0'
  JAVA_VERSION: '17'
  RUBY_VERSION: '3.0'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-number: ${{ steps.version.outputs.build-number }}
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          BUILD_NUMBER=$(date +%s)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "build-number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "üöÄ Building version: $VERSION ($BUILD_NUMBER)"

      - name: Check deployment
        id: check
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event.inputs.deploy_stores }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  build-android:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.environment)) || fromJson('["mainnet"]') }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 35
          build-tools: 35.0.0

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          yarn postinstall

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}

      - name: Setup environment
        run: |
          cp .env.${{ matrix.environment }} .env
          sed -i "s/^VERSION_CODE=.*/VERSION_CODE=${{ needs.prepare.outputs.build-number }}/" android/gradle.properties

      - name: Build Android
        run: |
          cd android
          chmod +x gradlew
          ./gradlew clean
          ./gradlew bundle${{ matrix.environment }}Release \
            -x generateAutolinkingPackageList \
            --stacktrace \
            --build-cache
        env:
          GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g -XX:+HeapDumpOnOutOfMemoryError"

      - name: Upload bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-bundle-${{ matrix.environment }}
          path: android/app/build/outputs/bundle/${{ matrix.environment }}Release/
          retention-days: 30

  build-ios:
    needs: prepare
    runs-on: macos-14
    strategy:
      matrix:
        environment: ${{ github.event_name == 'workflow_dispatch' && fromJson(format('["{0}"]', github.event.inputs.environment)) || fromJson('["mainnet"]') }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          yarn postinstall

      - name: Setup environment
        run: cp .env.${{ matrix.environment }} .env

      - name: Install CocoaPods
        run: |
          cd ios
          pod install --repo-update

      - name: Build iOS
        run: |
          cd ios
          xcodebuild -workspace TuCopWallet.xcworkspace \
            -scheme TuCopWallet-${{ matrix.environment }} \
            -configuration Release \
            -archivePath build/TuCopWallet.xcarchive \
            archive \
            CODE_SIGNING_ALLOWED=NO

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: ios-archive-${{ matrix.environment }}
          path: ios/build/
          retention-days: 30

  notify-deployment:
    needs: [prepare, build-android, build-ios]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify server
        run: |
          ANDROID_SUCCESS="${{ needs.build-android.result == 'success' }}"
          IOS_SUCCESS="${{ needs.build-ios.result == 'success' }}"
          
          curl -X POST "${{ secrets.RAILWAY_API_URL || 'https://api.example.com' }}/api/update-version" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.RAILWAY_API_KEY || 'demo-key' }}" \
            -d '{
              "platform": "both",
              "version": "${{ needs.prepare.outputs.version }}",
              "buildNumber": "${{ needs.prepare.outputs.build-number }}",
              "android": {
                "success": '$ANDROID_SUCCESS',
                "buildTime": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
              },
              "ios": {
                "success": '$IOS_SUCCESS',
                "buildTime": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
              },
              "releaseNotes": "üöÄ Tu Cop Wallet v${{ needs.prepare.outputs.version }}\n\nüì± Android 15 (API 35) compatible\nüçé iOS 15+ compatible\n‚ö° React Native 0.75.4\nüîß Gradle 8.10.2 + AGP 8.7.2\n\n‚úÖ Android: '${{ needs.build-android.result }}'\n‚úÖ iOS: '${{ needs.build-ios.result }}'",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "workflow": "${{ github.run_id }}"
            }' || echo "‚ö†Ô∏è Server notification failed"

      - name: Create Release
        if: github.ref == 'refs/heads/main' && (needs.build-android.result == 'success' || needs.build-ios.result == 'success')
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare.outputs.version }}-${{ needs.prepare.outputs.build-number }}
          name: "üöÄ Tu Cop Wallet v${{ needs.prepare.outputs.version }}"
          body: |
            ## üì± Tu Cop Wallet v${{ needs.prepare.outputs.version }}
            
            **Build:** ${{ needs.prepare.outputs.build-number }}
            **Commit:** ${{ github.sha }}
            
            ### üèóÔ∏è Build Status
            - **Android:** ${{ needs.build-android.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            - **iOS:** ${{ needs.build-ios.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            
            ### üîß Technical Details
            - **Android 15** (API 35) compatible
            - **Gradle** 8.10.2 + AGP 8.7.2
            - **React Native** 0.75.4
            - **Java** 17
            
            ### üì¶ Artifacts
            ${{ needs.build-android.result == 'success' && '- Android Bundle (.aab)' || '' }}
            ${{ needs.build-ios.result == 'success' && '- iOS Archive (.xcarchive)' || '' }}
          draft: false
          prerelease: false

      - name: Slack notification
        if: always() && secrets.SLACK_WEBHOOK_URL != ''
        run: |
          ANDROID_ICON="${{ needs.build-android.result == 'success' && '‚úÖ' || '‚ùå' }}"
          IOS_ICON="${{ needs.build-ios.result == 'success' && '‚úÖ' || '‚ùå' }}"
          
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "üöÄ *Tu Cop Wallet Build Complete*",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Version:* ${{ needs.prepare.outputs.version }}\n*Build:* ${{ needs.prepare.outputs.build-number }}\n*Android:* '$ANDROID_ICON' ${{ needs.build-android.result }}\n*iOS:* '$IOS_ICON' ${{ needs.build-ios.result }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }'